@page "/respond"
@using GdscRecruitment.Features.Fields
@using GdscRecruitment.Features.Responses
@using AutoMapper
@using GdscRecruitment.Features.Fields.Views
@using GdscRecruitment.Features.Responses.Models
@using GdscRecruitment.Features.Responses.Views
@inherits OwningComponentBase<ResponsesService>
@inject FieldsService FieldsService
@inject NavigationManager Navigation
@inject IMapper Mapper

<PageTitle>GDSC UPT Recruitment Form</PageTitle>

<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudForm
                @ref="form"
                @bind-isValid="@success"
                @bind-Errors="@errors"
                Model="@_request">
                @foreach (var question in _questions)
                {
                    <MudTextField
                        T="string"
                        Label="@question.Name"
                        Required="@question.IsRequired"
                        Placeholder="@question.Placeholder"
                        RequiredError="This field cannot be empty!"
                        @bind-Value="@_request.Value"
                        For="(() => _request.Value)"/>
                }
                <div>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" Class="m1-auto">Submit</MudButton>
                </div>
            </MudForm>
        </MudPaper>
    </MudItem>
</MudGrid>


@code {
    private bool success = false;

    private MudForm form = new();

    private string[] errors = { };
    
    private ResponseRequestView _request = new();

    private IList<FieldResponseView> _questions = new List<FieldResponseView>();

    private IList<ResponseResponseView> _responses = new List<ResponseResponseView>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _questions = await FieldsService.Get();
    }

}