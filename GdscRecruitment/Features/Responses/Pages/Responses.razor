@page "/respond"
@using GdscRecruitment.Features.Fields
@using GdscRecruitment.Features.Responses
@using GdscRecruitment.Features.Fields.Views
@using GdscRecruitment.Features.Responses.Views
@using GdscRecruitment.Common.Features.Users.Models
@inherits GdscRecruitment.Common.Shared.BaseComponent<ResponsesService>
@inject FieldsService FieldsService
@inject NavigationManager Navigator

<PageTitle>GDSC UPT Recruitment Form</PageTitle>

<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <EditForm
                @bind-isValid="@success"
                Model="@_responses"
                OnValidSubmit="Submit">
                @foreach (var question in _questions)
                {
                    <MudTextField
                        T="string"
                        Label="@question.Name"
                        Required="@question.IsRequired"
                        Placeholder="@question.Placeholder"
                        RequiredError="This field cannot be empty!"
                        @bind-Value="@_responses[question.Id].Value"
                        For="@(() => _responses[question.Id].Value)"/>
                }
                <div>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Disabled="@(success)" Class="m1-auto">Submit</MudButton>
                </div>
            </EditForm>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private bool success = false;

    private Dictionary<string, ResponseRequestView> _responses = new Dictionary<string, ResponseRequestView>();

    private IList<FieldResponseView> _questions = new List<FieldResponseView>();

    private IList<ResponseResponseView> _responseModels = new List<ResponseResponseView>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _questions = await FieldsService.Get();

        foreach (var question in _questions)
        {
            _responses[question.Id] = new ResponseRequestView
            {
                FieldId = question.Id,
                UserId = User!.Id,
            };
        }
    }

    private async Task Submit()
    {
        success = true;
        foreach ( (var key, var response) in _responses)
        {
            await Service.Add(response);
        }

        _responseModels = await Service.Get();
    }

}