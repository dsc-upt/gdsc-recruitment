@using GdscRecruitment.Features.Fields.Models
@using GdscRecruitment.Features.Fields.Views
@using AutoMapper
@using GdscRecruitment.Common.Utilities
@using GdscRecruitment.Utilities
@inject IMapper Mapper
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@inherits OwningComponentBase<FieldsService>

<EditForm Model="@_viewModel" OnValidSubmit="OnSubmit">
    <DataAnnotationsValidator/>
    <MudGrid>
        <MudItem xs="12">
            <MudCard>
                <MudCardContent>
                    <MudTextField
                        HelperText="Input Filed Name"
                        @bind-Value="_viewModel.Name"
                        For="@(() => _viewModel.Name)"/>
                    <MudTextField
                        Class="mt-3"
                        HelperText="Input Field Placeholder"
                        @bind-Value="_viewModel.Placeholder"
                        For="@(() => _viewModel.Placeholder)"/>
                    <MudCheckBox
                        @bind-Checked="_viewModel.IsRequired"
                        Color="Color.Secondary"
                        Disabled="false"
                        For="@(() => _viewModel.IsRequired)"/>
                    <div class="d-flex">
                        <MudRadioGroup
                            For="@(() => _viewModel.FieldType)"
                            @bind-SelectedOption="_viewModel.FieldType"
                            T="FieldTypeEnum"
                            Required="true"
                            RequiredError="Filed Type is required!">
                            @foreach (FieldTypeEnum type in Enum.GetValues(typeof(FieldTypeEnum)))
                            {
                                var color = type.GetColor();
                                <MudTooltip Color="color" Arrow="true">
                                    <MudRadio Color="color" Option="type" @onclick="CheckOptions">@type.GetName()</MudRadio>
                                </MudTooltip>
                            }
                        </MudRadioGroup>
                    </div>
                </MudCardContent>
                
                @if (_hasOptions)
                {
                    <MudCard>
                        <MudCardContent>
                            Text
                        </MudCardContent>
                    </MudCard>
                }
                
                <MudCardActions>
                    <MudButton
                        Variant="Variant.Outlined"
                        Color="Color.Primary"
                        StartIcon="fa-solid fa-circle-left"
                        IconColor="Color.Primary"
                        Class="ml-auto"
                        OnClick="GoBack">
                        Back
                    </MudButton>
                    
                    <MudSpacer/>
                    
                    <MudButton
                        ButtonType="ButtonType.Submit"
                        Variant="Variant.Filled"
                        StartIcon="fa-solid fa-circle-check"
                        IconColor="Color.Surface"
                        Color="Color.Success"
                        Class="ml-auto">
                        @(isEdit ? "Update" : "Add")
                    </MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
        
        <MudItem xs="12">
            <MudText Typo="Typo.body2" Align="Align.Center">
                Fill out the form correctly to see the success message.
            </MudText>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    [Parameter]
    public FieldModel? Model { get; set; }

    private bool _hasOptions = false;

    private FieldRequestView _viewModel = new ();
    bool isEdit => Model is not null;
    
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _viewModel = Model is null ? _viewModel : Mapper.Map<FieldRequestView>(Model);
    }

    private async Task AddField()
    {
        if (Model is not null)
        {
            Snackbar.Add("Something went wrong, there is an existing Model", Severity.Error);
            return;
        }

        await Service.Add(_viewModel);
        StateHasChanged();
        Snackbar.Add("Field added!", Severity.Success);
        Navigation.NavigateTo("/fields");
    }

    private async Task EditField()
    {
        if (Model is null)
        {
            Snackbar.Add("Something went wrong, Model is null", Severity.Error);
            return;
        }

        Model.Name = _viewModel.Name;
        Model.IsRequired = _viewModel.IsRequired;
        Model.Placeholder = _viewModel.Placeholder;

        await Service.Update(Model.Id, _viewModel);
        StateHasChanged();
        Snackbar.Add("Field edited!", Severity.Success);
        Navigation.NavigateTo("/fields");
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/fields");
    }

    private async Task OnSubmit()
    {
        if (isEdit)
        {
            await EditField();
        }
        else
        {
            await AddField();
        }

        await OnValidSubmit.InvokeAsync();
        _viewModel = new FieldRequestView();
    }

    private void CheckOptions()
    {
        if (_viewModel.FieldType == FieldTypeEnum.Dropdown || _viewModel.FieldType == FieldTypeEnum.Radio)
        {
            _hasOptions = true;
        }
    }
}