@using GdscRecruitment.Utilities
@using AutoMapper
@using GdscRecruitment.Features.Example.Models
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@inject IMapper Mapper
@inject ExamplesService Service

<EditForm Model="@_viewModel" OnValidSubmit="OnSubmit">
    <DataAnnotationsValidator/>
    <MudGrid>
        <MudItem xs="12">
            <MudCard>
                <MudCardContent>
                    <MudTextField HelperText="Max. 8 characters"
                                  @bind-Value="_viewModel.Title" For="@(() => _viewModel.Title)"/>
                    <MudTextField Class="mt-3"
                                  @bind-Value="_viewModel.Number" For="@(() => _viewModel.Number)"/>
                    <div class="d-flex">
                        <MudRadioGroup For="@(() => _viewModel.Type)" @bind-Value="_viewModel.Type" T="ExampleTypeEnum" Required="true" RequiredError="Account type is required!">
                            @foreach (ExampleTypeEnum item in Enum.GetValues(typeof(ExampleTypeEnum)))
                            {
                                <MudRadio Color="item.GetDisplayColor()" Option="item">@item.GetDisplayName()</MudRadio>
                            }
                        </MudRadioGroup>
                    </div>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Outlined" Color="Color.Primary" StartIcon="fa-solid fa-circle-left" IconColor="Color.Primary" Class="ml-auto" OnClick="GoBack">Back</MudButton>
                    <MudSpacer></MudSpacer>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" StartIcon="fa-solid fa-circle-check" IconColor="Color.Surface" Color="Color.Success" Class="ml-auto">@(IsEdit ? "Update" : "Add")</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudItem xs="12">
            <MudText Typo="Typo.body2" Align="Align.Center">
                Fill out the form correctly to see the success message.
            </MudText>
        </MudItem>
    </MudGrid>
</EditForm>


@code {

    [Parameter]
    public ExampleModel? Model { get; set; }

    private ExampleViewModel _viewModel = new("");
    bool IsEdit => Model is not null;

    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _viewModel = Model is null ? _viewModel : MapToViewModel(Model);
    }

    private ExampleViewModel MapToViewModel(ExampleModel model)
    {
        return Mapper.Map<ExampleViewModel>(model);
    }

    private async Task AddExample()
    {
        if (Model is not null)
        {
            Snackbar.Add("Something went wrong, there's and existing Model", Severity.Error);
            return;
        }

        var entity = new ExampleModel(_viewModel.Title) { Number = _viewModel.Number, Type = _viewModel.Type };
        entity.WriteJson();
        await Service.Add(entity);
        StateHasChanged();
        Snackbar.Add("Example added!", Severity.Success);
        Navigation.NavigateTo(ExampleRoutes.Examples);
    }

    private async Task EditExample()
    {
        if (Model is null)
        {
            Snackbar.Add("Something went wrong, Model is null", Severity.Error);
            return;
        }

        Model.Number = _viewModel.Number;
        Model.Type = _viewModel.Type;
        Model.Title = _viewModel.Title;
        await Service.Update(Model);
        StateHasChanged();
        Snackbar.Add("Example updated!", Severity.Success);
        Navigation.NavigateTo(ExampleRoutes.Examples);
    }

    private void GoBack()
    {
        Navigation.NavigateTo(ExampleRoutes.Examples);
    }

    private async Task OnSubmit()
    {
        if (IsEdit)
        {
            await EditExample();
        }
        else
        {
            await AddExample();
        }

        await OnValidSubmit.InvokeAsync();
        _viewModel = new ExampleViewModel("");
    }

}
