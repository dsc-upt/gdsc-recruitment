@attribute [Route(ExampleRoutes.Examples)]
@using GdscRecruitment.Utilities
@using AutoMapper
@using GdscRecruitment.Features.Example.Models
@using GdscRecruitment.Base
@using GdscRecruitment.Features.Example.Components
@inherits OwningComponentBase<ExamplesService>
@inject NavigationManager Navigation
@inject IMapper Mapper
@inject ViewModelHelper<ExampleViewModel> Helper

<PageTitle>Examples</PageTitle>

<AuthorizeView Roles="@Roles.Admin">
    <AddEditExampleForm OnValidSubmit="FetchData"></AddEditExampleForm>
</AuthorizeView>

@TableActions

<MudTable
    Class="mt-5"
    Loading="_loading"
    @bind-SelectedItems="_selected"
    T="ExampleViewModel"
    MultiSelection="true"
    Items="_elements"
    OnRowClick="NavigateTo"
    Hover="true"
    Filter="element => FilterFunc(element, _searchString)"
    Breakpoint="Breakpoint.Sm"
    LoadingProgressColor="Color.Info">

    <ToolBarContent>
        <MudText Typo="Typo.h6">Examples</MudText>

        <MudSpacer/>

        <MudTextField
            @bind-Value="_searchString"
            Placeholder="Search"
            Adornment="Adornment.Start"
            AdornmentIcon="fa-solid fa-sharp fa-magnifying-glass"
            AdornmentColor="Color.Tertiary"
            IconSize="Size.Medium"
            Class="mt-0">
        </MudTextField>
    </ToolBarContent>

    <HeaderContent>
        <MudTh>
            <MudTableSortLabel
                SortBy="new Func<ExampleModel, object>(x => x.Title)">
                @Helper.GetLabel(x => x.Title)
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel
                SortBy="new Func<ExampleModel, object>(x => x.Number)">
                @Helper.GetLabel(x => x.Number)
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel
                InitialDirection="SortDirection.Ascending"
                SortBy="new Func<ExampleModel, object>(x => x.Type)">
                @Helper.GetLabel(x => x.Type)
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel
                SortBy="new Func<ExampleModel, object>(x => x.Created)">
                @Helper.GetLabel(x => x.Created)
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel
                SortBy="new Func<ExampleModel, object>(x => x.Updated)">
                @Helper.GetLabel(x => x.Updated)
            </MudTableSortLabel>
        </MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>

    <RowTemplate>
        <MudTd DataLabel="@Helper.GetLabel(x => x.Title)">@context.Title </MudTd>
        <MudTd DataLabel="@Helper.GetLabel(x => x.Type)">
            <MudTooltip Color="@context.Type.GetColor()" Text="@context.Type.GetDescription()" Arrow="true">
                <MudText Color="@context.Type.GetColor()">@context.Type.GetName()</MudText>
            </MudTooltip>
        </MudTd>
        <MudTd DataLabel="@Helper.GetLabel(x => x.Number)">@context.Number </MudTd>
        <MudTd DataLabel="@Helper.GetLabel(x => x.Created)">@context.Created </MudTd>
        <MudTd DataLabel="@Helper.GetLabel(x => x.Updated)">@context.Updated </MudTd>
        <MudTd>
            <MudButton
                IconColor="Color.Error"
                StartIcon="fa-solid fa-trash"
                OnClick="() => Delete(context)">
            </MudButton>
        </MudTd>
    </RowTemplate>

    <PagerContent>
        <MudTablePager/>
    </PagerContent>

    <LoadingContent>
        <MudText>Fetching data...</MudText>
    </LoadingContent>

    <NoRecordsContent>
        <MudText>There are no records to display.</MudText>
    </NoRecordsContent>
</MudTable>

@TableActions

@code {
    private string _searchString = "";
    private bool _loading = true;
    private IList<ExampleViewModel> _elements = new List<ExampleViewModel>();
    private HashSet<ExampleViewModel> _selected = new();

    private RenderFragment TableActions => @<ExamplesTableActions SelectedItems="@_selected"></ExamplesTableActions>;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await FetchData();
        _loading = false;
    }

    private async Task FetchData()
    {
        Console.WriteLine("Fetching data...");
        _elements = Map(await Service.Get());
    }

    private static bool FilterFunc(ExampleViewModel element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Title.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Id.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return element.Number.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase) || $"{element.Title} {element.Number} {element.Id}".Contains(searchString);
    }

    private void NavigateTo(TableRowClickEventArgs<ExampleViewModel> tableRowClick)
    {
        Navigation.NavigateTo(ExampleRoutes.GetEditPath(tableRowClick.Item.Id));
    }

    private async Task Delete(ViewModel context)
    {
        _loading = true;
        await Service.Delete(context.Id);
        await FetchData();
        _loading = false;
    }

    private IList<ExampleViewModel> Map(IList<ExampleModel> models)
    {
        return Mapper.Map<List<ExampleViewModel>>(models);
    }

}
